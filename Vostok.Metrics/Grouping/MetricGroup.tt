<#@ include file="./../Codegen/CodegenCommons.ttinclude" once="true" #>
<#@ include file="./../Codegen/GroupingConstants.ttinclude" once="true" #>
using System;
using JetBrains.Annotations;
using Vostok.Metrics.Model;

namespace Vostok.Metrics.Grouping
{
	internal class MetricGroup<TMetric> : MetricGroupBase<TMetric>,
<# for (var keysCount = 1; keysCount <= DynamicTags_StringKeys_MaxKeyCount; keysCount++) { #>
		IMetricGroup<#=keysCount#><TMetric><#=keysCount == DynamicTags_StringKeys_MaxKeyCount ? "" : ","#>
<# } #>
    {
		private readonly string[] keys;
		
        public MetricGroup([NotNull] Func<MetricTags, TMetric> factory, [NotNull] params string[] keys)
            : base(factory)
        {
            this.keys = keys ?? throw new ArgumentNullException(nameof(keys));
        }
<# for (var keysCount = 1; keysCount <= DynamicTags_StringKeys_MaxKeyCount; keysCount++) { #>
		
		public TMetric For(<#=string.Join(", ", Enumerable.Range(1, keysCount).Select(x => $"string value{x}"))#>)
		{
			var tags = new [] 
            {
        <# for (var i = 0; i < keysCount; i++) { #>
        new MetricTag(keys[<#= i #>], value<#= i+1 #>),
        <# } #>
    };
  
            return For(new MetricTags(tags)); 
		}
<# } #>
    }
}