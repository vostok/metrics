<#@ include file="./../../CodeGeneration/CodeGenerationCommon.ttinclude" once="true" #>
using System;
using Vostok.Metrics.Model;

namespace Vostok.Metrics.DynamicTags.StringKeys
{
	public class TaggedMetric<TMetric> : TaggedMetricBase<TMetric>,
<# for (var keysCount = 1; keysCount <= DynamicTags_StringKeys_MaxKeyCount; keysCount++) { #>
		ITaggedMetric<#=keysCount#><TMetric><#=keysCount == DynamicTags_StringKeys_MaxKeyCount ? "" : ","#>
<# } #>
    {
		private readonly string[] keys;

        public StringKeysTaggedMetric(IMetricContext context, Func<MetricTags, TMetric> factory, params string[] keys)
            : base(context, factory)
        {
            this.keys = keys;
        }

        public StringKeysTaggedMetric(IMetricContext context, Func<MetricTags, TMetric> factory, TimeSpan? scrapePeriod, params string[] keys)
            : base(context, factory, scrapePeriod)
        {
            this.keys = keys;
        }
<# for (var keysCount = 1; keysCount <= DynamicTags_StringKeys_MaxKeyCount; keysCount++) { #>
		
		public TMetric For(<#=string.Join(", ", Enumerable.Range(1, keysCount).Select(x => $"string value{x}"))#>)
		{
			var tags = MetricTags.Empty;
	<# for (var i = 1; i <= keysCount; i++) { #>
            tags = tags.Add(new MetricTag(keys[<#= i-1 #>], value<#= i #>));
	<# } #>
  
            return For(tags); 
		}
<# } #>
    }
}