<#@ include file="./CodegenCommons.ttinclude" once="true" #>
<#@ include file="./GroupingConstants.ttinclude" once="true" #>
using System;
using JetBrains.Annotations;
using Vostok.Metrics.Grouping;
using Vostok.Metrics.Model;

namespace <#= model.MetricNamespace #>
{
    [PublicAPI]
    public static class <#= model.ExtensionClassName #>
    {
        /// <inheritdoc cref="<#= model.InheritDocType #>"/>
        /// <param name="context">Context this metric will belong to.</param>
        /// <param name="name">Name of the metric. It will be added to event's <see cref="MetricEvent.Tags"/> with key set to <see cref="Vostok.Metrics.WellKnownTagKeys.Name"/>.</param>
        /// <param name="config">Optional metric-specific config.</param>
        [NotNull]
		public static <#= model.MetricInterface #> <#= model.MetricClass #>([NotNull] this IMetricContext context, [NotNull] string name, [CanBeNull] <#= model.MetricConfigClass #> config = null)
            => new <#= model.MetricClass #>(context, MetricTagsMerger.Merge(context.Tags, name), config ?? <#= model.MetricConfigClass #>.Default);

        #region Metric group extensions

        /// <summary>
        /// <para>
        /// Creates a group of <see cref="<#= model.InheritDocType #>"><#= model.MetricClass #>s</see>.
        /// Metrics in the group share the same context tags and <paramref name="name"/> but have different dynamic tags.
        /// </para>
        /// <para>
        /// Dynamic tags are specified by an instance of <typeparamref name="TFor"/>.
        /// </para>
        /// <inheritdoc cref="<#= model.InheritDocType #>"/>
        /// </summary>
        /// <param name="context">Context this metric will belong to.</param>
        /// <param name="name">Name of the metric. It will be added to event's <see cref="MetricEvent.Tags"/> with key set to <see cref="Vostok.Metrics.WellKnownTagKeys.Name"/>.</param>
        /// <param name="config">Optional metric-specific config.</param>
        /// <inheritdoc cref="<#= model.InheritDocType #>"/>
		[NotNull]
        public static IMetricGroup<TFor, <#= model.MetricInterface #>> <#= model.MetricClass #><TFor>([NotNull] this IMetricContext context, [NotNull] string name, [CanBeNull] <#= model.MetricConfigClass #> config = null)
            => new MetricGroup<TFor, <#= model.MetricInterface #>>(CreateTagsFactory(context, name, config ?? <#= model.MetricConfigClass #>.Default));
<# for (var keysCount = 1; keysCount <= DynamicTags_StringKeys_MaxKeyCount; keysCount++) { #>

        /// <summary>
        /// <para>
        /// Creates a group of <see cref="<#= model.InheritDocType #>"><#= model.MetricClass #>s</see>.
        /// Metrics in the group share the same context tags and <paramref name="name"/> but have different dynamic tags.
        /// </para>
        /// <para>
        /// Dynamic tags are specified by string parameters. Define the keys now and pass the values later.
        /// </para>
        /// <inheritdoc cref="<#= model.InheritDocType #>"/>
        /// </summary>
        /// <param name="context">Context this metric will belong to.</param>
        /// <param name="name">Name of the metric. It will be added to event's <see cref="MetricEvent.Tags"/> with key set to <see cref="Vostok.Metrics.WellKnownTagKeys.Name"/>.</param>
<# for (var i = 1; i <= keysCount; i++) { #>
        /// <param name="key<#= i #>">Key of dynamic tag number <#= i #>.</param>
<# } #>
        /// <param name="config">Optional config</param>
        /// <inheritdoc cref="<#= model.InheritDocType #>"/>
		[NotNull]
        public static IMetricGroup<#= keysCount #><<#= model.MetricInterface #>> <#= model.MetricClass #>([NotNull] this IMetricContext context, [NotNull] string name, <#= FormatParameters("[NotNull] string key{0}", keysCount) #>, [CanBeNull] <#= model.MetricConfigClass #> config = null)
            => CreateMetricGroup(context, name, config, <#= FormatParameters("key{0}", keysCount) #>);
<# } #>
        #endregion

		#region Helper methods

        private static MetricGroup<<#= model.MetricClass #>> CreateMetricGroup(IMetricContext context, string name, <#= model.MetricConfigClass #> config = null, params string[] keys)
            => new MetricGroup<<#= model.MetricClass #>>(CreateTagsFactory(context, name, config ?? <#= model.MetricConfigClass #>.Default), keys);

        private static Func<MetricTags, <#= model.MetricClass #>> CreateTagsFactory(IMetricContext context, string name, <#= model.MetricConfigClass #> config)
            => tags => new <#= model.MetricClass #>(context, MetricTagsMerger.Merge(context.Tags, name, tags), config);

		#endregion
    }
}
<#+
MetricExtensionsModel model { get; set; }

class MetricExtensionsModel 
{
    public string MetricClass { get; set; }
    public string MetricInterface { get; set; }
    public string MetricConfigClass { get; set; }
    public string MetricNamespace { get; set; }
    public string ExtensionClassName { get; set; }
    public string InheritDocType { get; set; }

    public MetricExtensionsModel(string metricClass)
    {
        MetricClass = metricClass;
        MetricInterface = $"I{MetricClass}";
        MetricConfigClass = $"{MetricClass}Config";
        MetricNamespace = $"Vostok.Metrics.Primitives.{MetricClass}";
        ExtensionClassName = $"{MetricClass}FactoryExtensions";
        InheritDocType = MetricInterface;
    }
}
#>