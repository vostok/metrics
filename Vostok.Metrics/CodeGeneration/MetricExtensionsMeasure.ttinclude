<#@ include file="./CodeGenerationCommon.ttinclude" once="true" #>
using System;
using System.Diagnostics;
using JetBrains.Annotations;
using Vostok.Metrics.Helpers;

namespace <#= model.MetricNamespace #>
{
    [PublicAPI]
    public static class <#= model.ExtensionsClassName #>
    {
        public static void Report(this <#= model.MetricInterface #> metric, TimeSpan timeSpan)
        {
            var value = TimeSpanToDoubleConverter.ConvertOrThrow(timeSpan, metric.Unit);
            metric.Report(value);
        }

        public static IDisposable Measure(this <#= model.MetricInterface #> metric)
        {
            return new Measurement(metric);
        }
        
        private class Measurement : IDisposable
        {
            private readonly Stopwatch stopwatch;
            private readonly <#= model.MetricInterface #> metric;
            
            public Measurement(<#= model.MetricInterface #> metric)
            {
                this.metric = metric;
                //todo Maybe use PreciseDateTime here?
                stopwatch = Stopwatch.StartNew();
            }

            public void Dispose()
            {
                metric.Report(stopwatch.Elapsed);
            }
        }
    }
}
<#+
MetricMeasureModel model { get; set; }

class MetricMeasureModel 
{
    public string MetricInterface { get; set; }
    public string MetricNamespace { get; set; }
    public string ExtensionsClassName { get; set; }

    public MetricMeasureModel(string metricClass)
    {
        MetricInterface = $"I{metricClass}";
        MetricNamespace = $"Vostok.Metrics.Primitives.{metricClass}Impl";
        ExtensionsClassName = $"{MetricInterface}ExtensionsMeasure";
    }
}
#>